version: '3.7'
services:
  api:
    container_name: api
    image: ${PROJECT_NAME}-api:latest
    build:
      context: ./api
      target: api_stage
      args:
        - APP_ENV=${APP_ENV}
        - PHP_VERSION=${PHP_VERSION}
        - SYMFONY_PHPUNIT_VERSION=${SYMFONY_PHPUNIT_VERSION}
        - APCU_VERSION=${APCU_VERSION}
        - SKELETON=${SYMFONY_SKELETON}
        - STABILITY=${SYMFONY_STABILITY}
        - SYMFONY_VERSION=${SYMFONY_VERSION}
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV}
      - PHP_VERSION=${PHP_VERSION}
      - SYMFONY_PHPUNIT_VERSION=${SYMFONY_PHPUNIT_VERSION}
      - APCU_VERSION=${APCU_VERSION}
      - SKELETON=${SYMFONY_SKELETON}
      - STABILITY=${SYMFONY_STABILITY}
      - SYMFONY_VERSION=${SYMFONY_VERSION}
      - DATABASE_URL=${DATABASE_URL}
      - TRUSTED_PROXIES=${TRUSTED_PROXIES}
      - TRUSTED_HOSTS=${SERVER_NAME}
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - database
    ports:
      - "${API_PORT_PUBISHED}:${API_PORT_TARGET}"
    volumes:
      - socket_data:/var/run/php
      - ./:/srv/app
      - ./docker/php/conf.d/symfony.dev.ini:/usr/local/etc/php/conf.d/symfony.ini
    networks:
      - api_network

  nginx:
    container_name: nginx
    image: ${PROJECT_NAME}-nginx:latest
    build:
      context: ./api
      target: nginx_stage
      args:
        - APP_ENV=${APP_ENV}
        - NGINX_VERSION=${NGINX_VERSION}
    restart: always
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV}
      - NGINX_VERSION=${NGINX_VERSION}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .:/var/www/html:ro,cached
    depends_on:
      - api
    networks:
      - api_network



  # mailer:
  #     image: schickling/mailcatcher
  #     ports: [1025, 1080]

  database:
    container_name: database
    image: postgres:${POSTGRES_VERSION}
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      # You should definitely change the password in production
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "${POSTGRES_PORT_PUBISHED}:${POSTGRES_PORT_TARGET}"
    networks:
      - api_network

  database_admin:
    container_name: database_admin
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    restart: always
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT_PUBISHED}:${PGADMIN_PORT_TARGET}"
    networks:
      - api_network

networks:
  api_network:

volumes:
  database_data:
  socket_data:
