version: '3.7'
services:
  api:
    container_name: api
    image: ${PROJECT_NAME}-api:latest
    build:
      context: ./api
      target: api_stage
      args:
        - APP_ENV=${APP_ENV}
        - PHP_VERSION=${PHP_VERSION}
        - SYMFONY_PHPUNIT_VERSION=${SYMFONY_PHPUNIT_VERSION}
        - APCU_VERSION=${APCU_VERSION}
        - SKELETON=${SYMFONY_SKELETON}
        - STABILITY=${SYMFONY_STABILITY}
        - SYMFONY_VERSION=${SYMFONY_VERSION}
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - database
    ports:
      - "${API_PORT_PUBISHED}:${API_PORT_TARGET}"
    volumes:
      - socket_data:/var/run/php
      - ./api:/srv/app
      - ./api/docker/php/conf.d/symfony.dev.ini:/usr/local/etc/php/conf.d/symfony.ini
    networks:
      - api_network

  nginx:
    container_name: nginx
    image: ${PROJECT_NAME}-nginx:latest
    build:
      context: ./api
      target: nginx_stage
      args:
        - APP_ENV=${APP_ENV}
        - NGINX_VERSION=${NGINX_VERSION}
        - NGINX_HTTP_PORT_PUBISHED=${NGINX_HTTP_PORT_PUBISHED}
        - NGINX_HTTPS_PORT_PUBISHED=${NGINX_HTTPS_PORT_PUBISHED}
        - API_PORT_PUBISHED=${API_PORT_PUBISHED}
    restart: always
    env_file:
      - .env
    ports:
      - "${NGINX_HTTP_PORT_PUBISHED}:${NGINX_HTTP_PORT_TARGET}"
      - "${NGINX_HTTPS_PORT_PUBISHED}:${NGINX_HTTPS_PORT_TARGET}"
    volumes:
      - .:/var/www/html:ro,cached
      - ./api/docker/nginx/nginx.conf:/etc/nginx/templates/default.conf.template
    depends_on:
      - api
    networks:
      - api_network

  caddy:
    container_name: caddy
    image: ${PROJECT_NAME}-caddy:latest
    build:
      context: .
      target: caddy_stage
      args:
        - CADDY_VERSION=${CADDY_VERSION}
        - API_PATH=${API_PATH}
        - ADMIN_PATH=${ADMIN_PATH}
        - SERVER_NAME=${SERVER_NAME}
        - CADDY_HTTP_PORT_PUBISHED=${CADDY_HTTP_PORT_PUBISHED}
        - CADDY_HTTPS_PORT_PUBISHED=${CADDY_HTTPS_PORT_PUBISHED}
        - CADDY_HTTP3_PORT_PUBISHED=${CADDY_HTTP3_PORT_PUBISHED}
        - WEB_BACKEND_PORT_PUBISHED=${WEB_BACKEND_PORT_PUBISHED}
        - WEB_FRONTEND_PORT_PUBISHED=${WEB_FRONTEND_PORT_PUBISHED}
        - NGINX_HTTP_PORT_PUBISHED=${NGINX_HTTP_PORT_PUBISHED}
    depends_on:
      - nginx
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - "${CADDY_HTTP_PORT_PUBISHED}:${CADDY_HTTP_PORT_TARGET}/tcp"
      # HTTPS
      - "${CADDY_HTTPS_PORT_PUBISHED}:${CADDY_HTTPS_PORT_TARGET}/tcp"
      # HTTP/3
      - "${CADDY_HTTP3_PORT_PUBISHED}:${CADDY_HTTP3_PORT_TARGET}/udp"
    networks:
      - api_network

  # mailer:
  #     image: schickling/mailcatcher
  #     ports: [1025, 1080]

  database:
    container_name: database
    image: postgres:${POSTGRES_VERSION}
    restart: always
    env_file:
      - .env
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "${POSTGRES_PORT_PUBISHED}:${POSTGRES_PORT_TARGET}"
    networks:
      - api_network

  database_admin:
    container_name: database_admin
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    restart: always
    env_file:
      - .env
    ports:
      - "${PGADMIN_PORT_PUBISHED}:${PGADMIN_PORT_TARGET}"
    networks:
      - api_network

networks:
  api_network:


volumes:
  database_data:
  socket_data:
  caddy_data:
  caddy_config:
